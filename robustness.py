{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPSFHyn2U3ykuyb6Q/zd98L"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"zgTlfijWJC9M","executionInfo":{"status":"ok","timestamp":1747215237991,"user_tz":-330,"elapsed":27,"user":{"displayName":"Neha Sharma","userId":"05894450036722153092"}}},"outputs":[],"source":["with open(\"robustness.py\", \"w\") as f:\n","    f.write(\"\"\"\n","from math import log2\n","import string\n","\n","def shannon_entropy(password):\n","    prob = [password.count(c) / len(password) for c in set(password)]\n","    return round(-sum(p * log2(p) for p in prob), 2)\n","\n","def guess_estimate(password):\n","    charset = 0\n","    if any(c.islower() for c in password): charset += 26\n","    if any(c.isupper() for c in password): charset += 26\n","    if any(c.isdigit() for c in password): charset += 10\n","    if any(c in string.punctuation for c in password): charset += len(string.punctuation)\n","    entropy_bits = len(password) * log2(charset)\n","    guesses = 2 ** entropy_bits\n","    return round(entropy_bits, 2), f\"{guesses:.2e}\"\n","\n","def audit_password(password):\n","    entropy, guess_count = guess_estimate(password)\n","    return {\n","        \"entropy\": shannon_entropy(password),\n","        \"guess_count\": guess_count\n","    }\n","\"\"\")\n"]}]}
{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMnJFpDwnYGPNlWV4Rqsszv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"WY0Izp-aIaue","executionInfo":{"status":"ok","timestamp":1747215107393,"user_tz":-330,"elapsed":5,"user":{"displayName":"Neha Sharma","userId":"05894450036722153092"}}},"outputs":[],"source":["with open(\"generator.py\", \"w\") as f:\n","    f.write(\"\"\"\n","from qiskit import QuantumCircuit, Aer, execute\n","import string\n","\n","def get_qrandom_bits(n_bits):\n","    qc = QuantumCircuit(n_bits, n_bits)\n","    qc.h(range(n_bits))\n","    qc.measure(range(n_bits), range(n_bits))\n","    backend = Aer.get_backend('qasm_simulator')\n","    result = execute(qc, backend, shots=1).result()\n","    bits = list(result.get_counts().keys())[0][::-1]\n","    return bits\n","\n","def generate_password(length=16):\n","    charset = string.ascii_letters + string.digits + string.punctuation\n","    bits = get_qrandom_bits(length * 8)\n","    password = ''\n","    for i in range(length):\n","        segment = bits[i*8:(i+1)*8]\n","        index = int(segment, 2) % len(charset)\n","        password += charset[index]\n","    return password\n","\"\"\")\n"]}]}
{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPKB6SFiEtFvFLnrU2oXi9E"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"ACnfN0jSJUn6","executionInfo":{"status":"ok","timestamp":1747215303493,"user_tz":-330,"elapsed":14,"user":{"displayName":"Neha Sharma","userId":"05894450036722153092"}}},"outputs":[],"source":["with open(\"app.py\", \"w\") as f:\n","    f.write(\"\"\"\n","import streamlit as st\n","from generator import generate_password\n","from robustness import audit_password\n","from hash_util import hash_password\n","\n","st.title(\"🔐 Quantum Password Generator\")\n","\n","length = st.slider(\"Select password length\", min_value=8, max_value=32, value=16)\n","\n","if st.button(\"Generate Password\"):\n","    password = generate_password(length)\n","    salt, hashed = hash_password(password)\n","    audit = audit_password(password)\n","\n","    st.subheader(\"🧪 Password\")\n","    st.code(password)\n","\n","    st.subheader(\"🔐 PBKDF2 Hash\")\n","    st.text_area(\"Hashed Output\", hashed, height=100)\n","\n","    st.subheader(\"📊 Strength Metrics\")\n","    st.write(f\"Shannon Entropy: `{audit['entropy']} bits`\")\n","    st.write(f\"Estimated Brute Force Guesses: `{audit['guess_count']}`\")\n","\"\"\")\n"]}]}